Fanx调用其他语言
*************


Fanx有好几种本地调用机制，根据不同的情况选择。

native class
===========
这种是用本地语言实现一个完整的类，实现代码必须和编译器生成的精确一致。目前只有java和JS支持这种方法。

native method
===========
这是最推荐的一种本地调用方式。native关键字标记的方法被转到peer对象的对应方法。

    class Foo
    {
      native Str a(Bool x)
      static native Void b(Int x)
      native Str? f
    }
对应的本地实现:

    // Java or C#
    package fan.mypod;
    class FooPeer
    {
      public static FooPeer make(Foo self) { return new FooPeer(); }

      // instance methods always take implicit self
      public String a(Foo self, boolean x) { return "a"; }

      // static methods are just normal statics with matching signatures
      public static void b(long x) {}

      //field
      public String f(Foo t) { return f; }
      public void f(Foo t, String v) { f = v; }
      String f;
    }

    // JavaScript
    fan.mypod.FooPeer = function(){}
    fan.mypod.FooPeer.prototype.a = function(self, x) { return "a"; }
    fan.mypod.FooPeer.b = function(x) {}

    fan.mypod.FooPeer.prototype.m_f = "";
    fan.mypod.FooPeer.prototype.f   = function(t) { return this.m_f; }
    fan.mypod.FooPeer.prototype.f$  = function(t, v) { this.m_f = v; }


    //FNI(fanrun runtime)
    fr_Obj mypod_Foo_a(fr_Env env, frObj self, fr_Bool x) { return fr_newStrUtf8(env, "a"); }
    void mypod_Foo_b(fr_Env env, fr_Int x) {}
    fr_Obj mypod_Foo_f(fr_Env env, fr_Obj self) {...}
    void mypod_Foo_f__(fr_Env env, fr_Obj self, fr_Obj v) {...}
如果是简单的无状态的方法，可以给类加@NoPeer属性来避免生成peer字段(同时peer类也没必要有make方法)。

java编译时第三方.jar库放入lib/java/ext/目录。

FNI
===========
fni是虚拟机调用C的机制，类似于JNI。

可以这样生成头文件：

    fni podname
用法：

    fr_Method method = fr_findMethod(...);
    fr_callMethod(env, method, ...);

    fr_Field field = fr_findField(...);
    fr_setField(env, field, ...);
其中fr_Method, fr_Feild，都是不变的，可以缓存起来。

持有fanx对象时要告诉垃圾收集器:

    fr_Obj n = fr_newGlobalRef(env, obj);
    fr_deleteGlobalRef(env, n);
字符串和数组操作：

    fr_Obj fr_newStrUtf8(fr_Env env, const char *bytes);
    const char *fr_getStrUtf8(fr_Env env, fr_Obj str);

    fr_Obj fr_arrayNew(fr_Env env, fr_Type type, int32_t elemSize, size_t size);
    size_t fr_arrayLen(fr_Env env, fr_Obj array);
    void fr_arrayGet(fr_Env env, fr_Obj array, size_t index, fr_Value *val);
    void fr_arraySet(fr_Env env, fr_Obj array, size_t index, fr_Value *val);
和JNI一样，本地的指针需要自己保存在Int变量中。

详细的见runtime/fni/fni.h

Java FFI
===========
Java FFI机制允许代码直接调用Java代码，例如。

    using [java] java.lang

    class HelloWorld
    {
      Void main()
      {
        System.out.println("Java FFI hello world")
      }
    }
fanxb不支持java FFI，只能用fanb编译器编译。



JavaScript交互
===========
dom pod里面有一些能直接调用js的方法：

    Win.cur.eval
    Elem.trap
    Elem.invoke
需要的可以自行查阅。

直接调用C
===========
可以直接使用runtime/gen/temp下面生成的头文件调用C方法。

虚方法调用可以使用runtime/gen/runtime.h里面的宏：

    FR_VCALL  //虚函数调用
    FR_ICALL  //接口函数调用
这种只能用在生成C编译中。

C FFI
===========
这种目前缺乏测试和维护。


完
===========
总之，一般情况下使用native method方法，其他机制会导致绑定到特定语言上。