类型和类型系统
**********

Pod
==========
pod表示模块、部署单元、版本单元、命名空间。

约定的目录结构如下：
pre>
- helloPod
   - pod.props
   - fan/
       - Main.fanx
   - test/
       - Test.fanx
<pre

pod.props构建脚本用来指定pod的名称、版本、依赖关系。例如：

  podName = hello
  summary = test lib
  version = 2.0
  srcDirs = test/,fan/
  depends = sys 1.0, std 1.0
using语句
---------
使用using语句来引用外部pod，或者pod中的类。例如：

  using inet
  using inet::TcpSocket

类型别名
----------
  using blue::Foo as BlueFoo

类型
==========
fanx中类型包括class、mixin，其中class有可分为enum、facet、struct、data等。

mixin（混入）
----------
接口带有实现，用来表达多继承。

  mixin Audio
  {
    abstract var volume: Int
    fun incrementVolume() { volume += 1 }
    fun decrementVolume() { volume -= 1 }
  }

  class Television : Audio
  {
    override var volume : Int = 0
  }
enum（枚举类）
----------
enum class Color { red, blue, green }
enum类编译器会自动生成一些方法：

  apr := Month.apr              // direct access
  jun := Month.vals[5]          // lookup by ordinal
  aug := Month.fromStr("aug")   // lookup by name
  Month.fromStr("bad")          // throws ParseErr
  Month.fromStr("bad", false)   // returns null
facet（注解类）
----------
定义facet：

  facet class Table
  {
    const name : Int = ""
    const autoCreate: Bool
  }
使用注解：

  @Table { name = "Employees"; autoCreate = true }
  class Employee {}
struct（结构类）
----------
struct表示值语义的类型，编译器可能对这种类优化为堆上分配并按值传递。

  const struct class Point {
    const x: Int
    const y: Int
  }
  p := Point{ x=1; y=2 }
data（数据类）
----------
自动生成toStr, hash, make, equals, compare等方法。

  data class Point { var x: Float; var y: Float }
  p := Point(0.1, 2.0)
  echo(p)
类型系统
===========
可空类型
----------
在类型后面使用？表示是否可以存储null。

  Str   // never stores null
  Str?  // might store null
泛型类型
----------
目前只支持泛型类，不支持泛型方法

  class Foo<T> {
    var t: T?
    fun get(): T { return t }
  }

  foo := Foo<Str>()
  foo.t = "abc"
隐式类型转换
----------
fanx使用宽松的类型系统，在方法调用时隐式的自动转换类型。

  fun func(x: Int): Int { ... }

  n : Num = 5
  s : Str = "foo"
  o : Num = 5.0

  // 隐式转换
  func(n)  =>  func(n as Int)

  // 编译错误
  func(s)  =>  error

  // 运行时错误
  func(o)  =>  Float to Int Exception

不可变性
==========
const类型
----------
如果类型有const标识，则表示不可变类型。不可变类型的所有字段必须都是const的，即深度不可变。

  const class Point {
     const x: Float
     const y: Float
     new make(|This| f) { f(this) }
  }
let变量
----------
类似于const，但表示浅层的不可变。

   const p: Str       //deep immutable
   const p: StrBuf    //compile error
   let p: StrBuf      //shallow immutable
运行时不可变
----------
使用rtconst标示来重载如下方法，使得对象可以从可变对象变为不可变对象。

  rtconst class Buf {
    override fun isImmutable(): Bool { ... }
    override fun toImmutable(): This { ... }
  }
类型继承
============
类型可以继承一个virtual类型，和多个mixin类型。mixin只能继承mixin。

  // class inheritance
  class SubClassA : BaseClass {}
  class SubClassB : MixinA, MixinB {}
  class SubClassC : BaseClass, MixinA, MixinB {}

  // mixin inheritance
  mixin MixinC : MixinA {}
  mixin MixinD : MixinA, MixinB {}
类型默认不能被继承，使用virutal表示是否可以被继承。

方法或者字段overrdie
----------
  class Animal
  {
    virtual fun talk() { echo("generic") }
  }

  class Cat : Animal
  {
    override fun talk() { echo("meow") }
  }
使用override来重写virtual方法。非virtual方法不能重写。

返回类型协变
----------
为了保证Liskov Substitution Principle原则，返回类型可以窄化而不能宽化。

  abstract class Animal
  {
    abstract fun mommy(): Animal
    abstract fun daddy(): Animal
  }

  class Cat : Animal
  {
    override fun mommy(): Cat {...}
    override fun daddy(): Cat {...}
  }
访问Super成员
----------
使用super关键字：

  // unnamed super
  super.someMethod()

  // named super
  Base.super.someMethod()
