

类和方法
========
熟悉的语法
  class Person
  {
    var name: Str
    var age: Int

    //有默认参数的方法
    fun say(a: Str = "default") { echo("Hi $a") }

    //命名构造函数
    new make(name: Str, age: Int) {
      this.name = name
      this.age = age
    }
  }

  //类型推断
  p := Person("B", 30)

  //命名参数
  p := Person(name:"B", age:30)
字段访问
========
没有烦人的getters setters冗余代码

  class Person
  {
    var name: Str
    var age: Int {
      set { checkAge(val); &age = it }
    }
  }
混合静态和动态类型
========
通过 "->" 操作符动态的调用方法

  //静态调用
  p.age = 10
  p.say("A")

  //动态调用
  p->age = 10
  p->say("A")
字面量
========
  //列表
  [0, 1, 2]

  //映射
  [1:"one", 2:"two"]

  //区间
  0..5    // 0 to 5
  0..<5   // 0 to 4

  //字符串插入
  "$x + $y = ${x+y}"

  //时间段
  100.ms   //100毫秒
非空类型
========
编译器确保非空类型不会存储空值。

  a : Str? = null //可能存储null
  b : Str //从来不会存储null

  //可空性作为API的一部分
  fun foo(arg: Str?): Str { ... }
函数式和闭包
========
函数式第一类对象

  // 打印 0 到 9
  10.times { echo(it) }

  //排序
  files = files.sort |a, b| { a.modified <=> b.modified }

  //迭代
  ["one", "two", "three"].map { it.size }.each { echo(it) }
强不可变性
========
编译器支持不可变类

  //不可变类
  const class Str { ... }

  const p: Str       //深度不可变
  const p: StrBuf    //编译错误
  let p: StrBuf      //浅层不可变
线程安全的并发
========
Actor模式的并发。编译器和运行时环境确保线程之间不会共享可变对象。

  actor := Actor |msg| { echo(msg) }
  actor.send("Hi")
声明式编程
========
序列化格式是代码语法的子集。描述做什么，而不是怎么做。

  Window
  {
    title = "Demo"
    size = Size(600,600)
    GridPane
    {
      numCols = 2
      Label { text="label1" },
      EdgePane
      {
        top    = Button { text = "top" }
        left   = Button { text = "left" }
        right  = Button { text = "right" }
        bottom = Button { text = "bottom" }
        center = Button { text = "center" }
      }
    },
  }
模块化
========
Pods是版本化部署单元和命名空间，它门通过明确的依赖关注组织在一起。

pod的构建脚本是这样的:

  podName = testlib
  summary = test lib
  version = 2.0
  srcDirs = test/,fan/
  depends = sys 1.0, std 1.0, reflect 1.0
混入(Mixin)
========
接口带有实现代码

  mixin Audio
  {
    abstract var volume: Int
    fun incrementVolume() { volume += 1 }
    fun decrementVolume() { volume -= 1 }
  }

  class Television : Audio
  {
    override var volume : Int = 0
  }
泛型
========
  class Foo<T> {
    var t: T?
    fun get(): T { return t }
  }

  foo := Foo<Str>()
  foo.t = "abc"
扩展方法
========
我们可以从外部给类增加方法

  class Whatever {
    extension static fun foo(str: Str) {
      ...
    }
  }

  //shortcut of Whatever.foo(str)
  str.foo
面向切面编程
========
  //same as bar.trap("foo", arg)
  bar~>foo(arg)
Async/Await协程
========
C#/Javascript 风格的协程

  async fun foo(id: Int) {
    user := await getUser(id)
    image := await getImage(user.image)
    imageView.image = image
  }